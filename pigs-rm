#!/bin/dash

PATH="$PATH:$(pwd)"

usage_error() {
    echo 'usage: pigs-rm [--force] [--cached] <filenames>' >&2
    exit 1
}

pig_dir_error() {
    echo "pigs-rm: error: pigs repository directory .pig not found" >&2
    exit 1
}

not_in_repo_error() {
    echo "pigs-rm: error: '$1' is not in the pigs repository" >&2
    exit 1
}

staged_changes_error() {
    echo "pigs-rm: error: '$1' has staged changes in the index" >&2
    exit 1
}

repo_working_changes_error() {
    echo "pigs-rm: error: '$1' in the repository is different to the working file" >&2
    exit 1
}

index_working_repo_changes() {
    echo "pigs-rm: error: '$1' in index is different to both the working file and the repository" >&2
    exit 1
}

remove_from_index() {
    sed -i "/^.* $1$/d" '.pig/index'          # remove previous iterations of files from index
    sed -i '/^[[:space:]]*$/d' '.pig/index'   # remove newline with only whitespace
}

# Check for .pig folder
if [ ! -d '.pig' ]; then
    pig_dir_error
fi

force=false
cached=false
file_given=false

# Get options
while [ $# -gt 0 ]; do
    case "$1" in
        --force)
            force=true
            shift
            ;;
        --cached)
            cached=true
            shift
            ;;
        -*)
            usage_error
            ;;
        *)
            file_given=true
            break
            ;;
    esac
done

if [ "$file_given" = false ]; then
    usage_error
fi

for file in "$@"; do

    # Check if file exists in index
    if ! grep -E "^.* $file$" < '.pig/index' > '/dev/null'; then
        not_in_repo_error "$file"
    fi

    # Used to check the different error messages
    index_stage=$(grep -E "^.* $file$" < '.pig/index' | cut -f1 -d' ')
    previous_index_stage=$(grep -E "^.* $file$" < '.pig/prev_index' | cut -f1 -d' ')
    current_stage=$(sha1sum "$file" | cut -f1 -d' ')

    # Remove from the index only 
    if [ "$cached" = true ]; then

        # Check if both flags specified
        if [ "$force" = false ] && [ "$index_stage" != "$previous_index_stage" ] && [ "$index_stage" != "$current_stage" ]; then
            index_working_repo_changes "$file"
        fi

        remove_from_index "$file"
        continue
    fi

    # Remove from both index and dir
    if [ "$force" = true ]; then
        remove_from_index "$file"
        rm -f "$file"
        continue
    fi

    # Repo and working file differ
    if [ "$index_stage" = "$previous_index_stage" ]; then
        if [ ! -e ".pig/objects/$current_stage" ]; then
            repo_working_changes_error "$file"
        fi
    fi

    # Index differs or has staged changes
    if [ "$index_stage" != "$previous_index_stage" ]; then
        if [ "$index_stage" != "$current_stage" ]; then
            index_working_repo_changes "$file"
        else
            staged_changes_error "$file"
        fi
    fi

    # All cases pass
    remove_from_index "$file"
    rm -f "$file"
done
